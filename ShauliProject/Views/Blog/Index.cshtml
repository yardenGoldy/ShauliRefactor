@model IEnumerable<ShauliProject.Models.Post>

@Styles.Render("~/Styles/Search.css")
<section id="search">
    @using (Html.BeginForm("Search", "Post", FormMethod.Get))
    {
        <div>
            <span>
                <label>Start Date:</label>
                <input type="date" name="StartDate" />
            </span>
            <span>
                <label>End Date:</label>
                <input type="date" name="EndDate" />
            </span>
        </div>

        <div>
            <span>
                <label>Post Writer:</label>
                <input type="text" name="PostWriter" />
            </span>
            <span>
                <label>Post Title:</label>
                <input type="text" name="PostTitle" />
            </span>
        </div>
        <div>
            <span>
                <label>Post Words:</label>
                <input type="text" name="WordsInPosts" />
            </span>
            <span>
                <label>Writer's Website URL:</label>
                <input type="text" name="PostWriterWebsiteURL" />
            </span>
        </div>
        <div>
            <input type="submit" name="Search" value="חפש" />
        </div>
    }
</section>
<div id="mainContent">
    <p>
        @Html.ActionLink("Add New Post", "Create", "Post")
    </p>
    @if (Model.Count() == 0)
    {
        <div id="noData">
            There are no posts
        </div>
        }
    @foreach (var post in Model)
    {
        <section>
            <article class="blogPost">
                <header>
                    <h2>
                        <a href="@Url.Action("Details", "Post", new { id = post.Id })">
                            @post.Title
                        </a>
                    </h2>
                    <p>
                        Posted on.
                        <time datetime="@(post.PublishDate)">
                            @Html.DisplayFor(modelItem => post.PublishDate)
                        </time>
                        by
                        <a href="@(post.WriterWebSiteUrl)">@Html.DisplayFor(modelItem => post.Writer)</a>
                        -
                        <a href="#comments">
                            @{int countOfComments = post.Comments == null ? 0 : post.Comments.Count();}
                            @Html.DisplayFor(modelItem => countOfComments) comments
                        </a>
                    </p>
                </header>
                <div>
                    <p>
                        @Html.DisplayFor(modelItem => post.Content)
                    </p>
                    @if (post.Image != null && post.Image != string.Empty)
                    {
                        <img src="@(post.GetImageHtml)" />
                    }

                    @if (post.Video != null && post.Video != string.Empty)
                    {
                        <video controls>
                            <source src="@(post.GetVideoHtml)" type="video/mp4" />
                        </video>
                    }
                </div>
            </article>
        </section>

            using (Html.BeginForm("Create", "Comment", new { id = post.Id }, FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                var comment = new ShauliProject.Models.Comment();

                <h3>Post a comment</h3>
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <p>
                    @Html.LabelFor(model => comment.Title, htmlAttributes: new { @class = "control-label col-md-3" })
                    @Html.EditorFor(model => comment.Title, new { htmlAttributes = new { @class = "form-control col-md-9" } })
                    @Html.ValidationMessageFor(model => comment.Title, "", new { @class = "text-danger" })
                </p>
                <p>
                    @Html.LabelFor(model => comment.Writer, htmlAttributes: new { @class = "control-label col-md-3", @style = "text-align: left" })
                    @Html.EditorFor(model => comment.Writer, new { htmlAttributes = new { @class = "form-control col-md-9" } })
                    @Html.ValidationMessageFor(model => comment.Writer, "", new { @class = "text-danger" })
                </p>
                <p>
                    @Html.LabelFor(model => comment.WriterWebSiteUrl, htmlAttributes: new { @class = "control-label col-md-3" })
                    @Html.EditorFor(model => comment.WriterWebSiteUrl, new { htmlAttributes = new { @class = "form-control col-md-9" } })
                    @Html.ValidationMessageFor(model => comment.WriterWebSiteUrl, "", new { @class = "text-danger" })
                </p>
                <p>
                    @Html.LabelFor(model => comment.Content, htmlAttributes: new { @class = "control-label col-md-3" })
                    @Html.EditorFor(model => comment.Content, new { htmlAttributes = new { @class = "form-control col-md-9" } })
                    @Html.ValidationMessageFor(model => comment.Content, "", new { @class = "text-danger" })
                </p>
                <p>
                    <input type="submit" value="Post comment" class="btn btn-default" />
                </p>
                }
            }
</div>